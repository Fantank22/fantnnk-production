{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { memo } from 'react';\nimport { Emoji } from \"./Emoji\";\nimport { useContext } from \"./CountryContext\";\nimport { useAsync } from 'react-async-hook';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 30,\n    marginRight: 10\n  },\n  emojiFlag: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderWidth: 1 / PixelRatio.get(),\n    borderColor: 'transparent',\n    backgroundColor: 'transparent'\n  },\n  imageFlag: {\n    resizeMode: 'contain',\n    width: 25,\n    height: 19,\n    borderWidth: 1 / PixelRatio.get(),\n    opacity: 0.8\n  }\n});\nvar ImageFlag = memo(function (_ref) {\n  var countryCode = _ref.countryCode,\n      flagSize = _ref.flagSize;\n\n  var _useContext = useContext(),\n      getImageFlagAsync = _useContext.getImageFlagAsync;\n\n  var asyncResult = useAsync(getImageFlagAsync, [countryCode]);\n\n  if (asyncResult.loading) {\n    return React.createElement(ActivityIndicator, {\n      size: 'small'\n    });\n  }\n\n  return React.createElement(Image, {\n    resizeMode: 'contain',\n    style: [styles.imageFlag, {\n      borderColor: 'transparent',\n      height: flagSize\n    }],\n    source: {\n      uri: asyncResult.result\n    }\n  });\n});\nvar EmojiFlag = memo(function (_ref2) {\n  var countryCode = _ref2.countryCode,\n      flagSize = _ref2.flagSize;\n\n  var _useContext2 = useContext(),\n      getEmojiFlagAsync = _useContext2.getEmojiFlagAsync;\n\n  var asyncResult = useAsync(getEmojiFlagAsync, [countryCode]);\n\n  if (asyncResult.loading) {\n    return React.createElement(ActivityIndicator, {\n      size: 'small'\n    });\n  }\n\n  return React.createElement(Text, {\n    style: [styles.emojiFlag, {\n      fontSize: flagSize\n    }],\n    allowFontScaling: false\n  }, React.createElement(Emoji, _extends({}, {\n    name: asyncResult.result\n  })));\n});\nexport var Flag = function Flag(_ref3) {\n  var countryCode = _ref3.countryCode,\n      withEmoji = _ref3.withEmoji,\n      withFlagButton = _ref3.withFlagButton,\n      flagSize = _ref3.flagSize;\n  return withFlagButton ? React.createElement(View, {\n    style: styles.container\n  }, withEmoji ? React.createElement(EmojiFlag, _extends({}, {\n    countryCode: countryCode,\n    flagSize: flagSize\n  })) : React.createElement(ImageFlag, _extends({}, {\n    countryCode: countryCode,\n    flagSize: flagSize\n  }))) : null;\n};\nFlag.defaultProps = {\n  withEmoji: true,\n  withFlagButton: true\n};","map":{"version":3,"sources":["../src/Flag.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { memo } from 'react';\nimport { Emoji } from './Emoji';\nimport { useContext } from './CountryContext';\nimport { useAsync } from 'react-async-hook';\nimport { Image, StyleSheet, PixelRatio, Text, View, ActivityIndicator, } from 'react-native';\nconst styles = StyleSheet.create({\n    container: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 30,\n        marginRight: 10,\n    },\n    emojiFlag: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderWidth: 1 / PixelRatio.get(),\n        borderColor: 'transparent',\n        backgroundColor: 'transparent',\n    },\n    imageFlag: {\n        resizeMode: 'contain',\n        width: 25,\n        height: 19,\n        borderWidth: 1 / PixelRatio.get(),\n        opacity: 0.8,\n    },\n});\nconst ImageFlag = memo(({ countryCode, flagSize }) => {\n    const { getImageFlagAsync } = useContext();\n    const asyncResult = useAsync(getImageFlagAsync, [countryCode]);\n    if (asyncResult.loading) {\n        return React.createElement(ActivityIndicator, { size: 'small' });\n    }\n    return (React.createElement(Image, { resizeMode: 'contain', style: [\n            styles.imageFlag,\n            { borderColor: 'transparent', height: flagSize },\n        ], source: { uri: asyncResult.result } }));\n});\nconst EmojiFlag = memo(({ countryCode, flagSize }) => {\n    const { getEmojiFlagAsync } = useContext();\n    const asyncResult = useAsync(getEmojiFlagAsync, [countryCode]);\n    if (asyncResult.loading) {\n        return React.createElement(ActivityIndicator, { size: 'small' });\n    }\n    return (React.createElement(Text, { style: [styles.emojiFlag, { fontSize: flagSize }], allowFontScaling: false },\n        React.createElement(Emoji, Object.assign({}, { name: asyncResult.result }))));\n});\nexport const Flag = ({ countryCode, withEmoji, withFlagButton, flagSize, }) => withFlagButton ? (React.createElement(View, { style: styles.container }, withEmoji ? (React.createElement(EmojiFlag, Object.assign({}, { countryCode, flagSize }))) : (React.createElement(ImageFlag, Object.assign({}, { countryCode, flagSize }))))) : null;\nFlag.defaultProps = {\n    withEmoji: true,\n    withFlagButton: true,\n};\n//# sourceMappingURL=Flag.js.map"]},"metadata":{},"sourceType":"module"}