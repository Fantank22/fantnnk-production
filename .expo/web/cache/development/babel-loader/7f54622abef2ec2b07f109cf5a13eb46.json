{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"onPress\", \"onLongPress\", \"to\", \"accessibilityRole\"],\n    _excluded2 = [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"allowFontScaling\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar LinkPressable = function LinkPressable(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      _onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      to = _ref.to,\n      accessibilityRole = _ref.accessibilityRole,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (Platform.OS === 'web' && to) {\n    return React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n          e.preventDefault();\n          _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        }\n      },\n      onLongPress: onLongPress !== null && onLongPress !== void 0 ? onLongPress : undefined\n    }), children);\n  } else {\n    return React.createElement(PlatformPressable, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      onPress: _onPress\n    }), React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\n\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var icon = props.icon,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      to = props.to,\n      _props$focused = props.focused,\n      focused = _props$focused === void 0 ? false : _props$focused,\n      allowFontScaling = props.allowFontScaling,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n      _props$inactiveBackgr = props.inactiveBackgroundColor,\n      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n      style = props.style,\n      onPress = props.onPress,\n      pressColor = props.pressColor,\n      pressOpacity = props.pressOpacity,\n      rest = _objectWithoutProperties(props, _excluded2);\n\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n      _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n      borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(LinkPressable, {\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    allowFontScaling: allowFontScaling,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["LinkPressable","rest","Platform","styles","e","onPress","onLongPress","undefined","style","colors","useTheme","focused","activeTintColor","inactiveTintColor","Color","activeBackgroundColor","inactiveBackgroundColor","borderRadius","StyleSheet","color","backgroundColor","iconNode","icon","size","selected","to","marginLeft","marginVertical","fontWeight","label","container","marginHorizontal","overflow","wrapper","flexDirection","alignItems","padding","marginRight","flex","button","display"],"mappings":"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","sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        onLongPress={onLongPress ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}